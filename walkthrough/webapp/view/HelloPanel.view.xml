<!-- the whole content for the panel is now added to the new file HelloPanel.view.xml -->
<!-- we also specify the controller for the view by setting the controllerName attribute of the XML view -->
<mvc:View controllerName="sap.ui.demo.walkthrough.controller.HelloPanel"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc">
    <!-- the actual content is wrapped inside a Panel control, in order to group related content -->
    <!-- to layout the panel, we add the CSS class sapUiResponsiveMargin that will add some space around the panel -->
    <!-- we have to set the width of the panel to auto since the margin would otherwise be added to the default width of 100% and exceed the page size -->
    <!-- if you decrease the screen size, then you can actually see that the margin also decreases -->
    <!-- as the name suggests, the margin is responsive and adapts to the screen size of the device -->
    <!-- tablets will get a smaller margin and phones in portrait mode will not get a margin to save space on these small screens -->
    <Panel headerText="{i18n>helloPanelTitle}" class="sapUiResponsiveMargin" width="auto">
        <content>
            <!-- we add a new button to the view to open the dialog -->
            <!-- it simply calls an event handler function in the controller of the panel’s content view -->
            <!-- we will need the new id="helloDialogButton" in Step 29: Integration Test with OPA -->
            <!-- it is a good practice to set a unique ID like helloWorldButton to key controls of your app so that can be identified easily -->
            <!-- if the attribute `id` is not specified, the OpenUI5 runtime generates unique but changing ID like `__button23` for the control -->
            <!-- inspect the DOM elements of your app in the browser to see the difference -->
            <Button id="helloDialogButton" text="{i18n>openDialogButtonText}" press=".onOpenDialog" class="sapUiSmallMarginEnd"/>
            <!-- the button triggers the .onShowHello event handler function when being pressed -->
            <!-- in the XML view, we use data binding to connect the button text to the showHelloButtonText property in the i18n model, a resource bundle is a flat structure, therefore the preceding slash (/) can be omitted for the path -->
            <!-- we add our custom CSS class to the button to precisely define the space between the button and the input field -->
            <Button text="{i18n>showHelloButtonText}" press=".onShowHello" class="myCustomButton"/>
            <!-- we add an sap.m.Input control to the view, with this, the user can enter a recipient for the greetings -->
            <!-- we bind its value to a SAPUI5 model by using the declarative binding syntax for XML views -->
            <!-- the curly brackets {…} indicate that data is taken from the value of the recipient's object name property, this is called "data binding" -->
            <!-- /recipient/name declares the path in the model -->
            <Input value="{/recipient/name}" valueLiveUpdate="true" width="60%"/>
            <!-- to highlight the output text, we use a FormattedText control which can be styled individually, either by using custom CSS or with HTML code -->
            <!-- we add our custom CSS class (myCustomText) and add a theme-dependent CSS class to set the highlight color that is defined in the theme -->
            <!-- the actual color now depends on the selected theme which ensures that the color always fits to the theme and is semantically clear -->
            <!-- do not specify colors in custom CSS but use the standard theme-dependent classes instead -->
            <FormattedText htmlText="Hello {/recipient/name}" class="sapUiSmallMargin sapThemeHighlight-asColor myCustomText"/>
        </content>
    </Panel>
</mvc:View>