<!-- the root node of the XML structure is the view -->
<!-- we reference the default namespace sap.m where the majority of our UI assets are located, we define an additional sap.ui.core.mvc namespace with alias mvc, where the SAPUI5 views and all other Model-View-Controller (MVC) assets are located -->
<!-- we add a reference to the controller -->
<!-- a view does not necessarily need an explicitly assigned controller, you do not have to create a controller if the view is just displaying information and no additional functionality is required -->
<!-- if a controller is specified, it is instantiated after the view is loaded -->
<mvc:View controllerName="sap.ui.demo.walkthrough.controller.App"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc">
    <!-- the XML tags are mapped to controls and the attributes are mapped to the properties of the control -->
    <!-- the button triggers the .onShowHello event handler function when being pressed -->
    <!-- we also have to specify the name of the controller that is connected to the view and holds the .onShowHello function by setting the controllerName attribute of the view -->
    <!-- in the XML view, we use data binding to connect the button text to the showHelloButtonText property in the i18n model, a resource bundle is a flat structure, therefore the preceding slash (/) can be omitted for the path -->
    <Button text="{i18n>showHelloButtonText}" press=".onShowHello"/>
    <!-- we add an sap.m.Input control to the view, with this, the user can enter a recipient for the greetings -->
    <!-- we bind its value to a SAPUI5 model by using the declarative binding syntax for XML views -->
    <!-- the curly brackets {â€¦} indicate that data is taken from the value of the recipient's object name property, this is called "data binding" -->
    <!-- /recipient/name declares the path in the model -->
    <Input value="{/recipient/name}" description="Hello {/recipient/name}" valueLiveUpdate="true" width="60%"/>
</mvc:View>