<!-- the root node of the XML structure is the view -->
<!-- we reference the default namespace sap.m where the majority of our UI assets are located, we define an additional sap.ui.core.mvc namespace with alias mvc, where the SAPUI5 views and all other Model-View-Controller (MVC) assets are located -->
<!-- we add a reference to the controller -->
<!-- a view does not necessarily need an explicitly assigned controller, you do not have to create a controller if the view is just displaying information and no additional functionality is required -->
<!-- if a controller is specified, it is instantiated after the view is loaded -->
<mvc:View controllerName="sap.ui.demo.walkthrough.controller.App"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true">
    <!-- in order to make the fullscreen height of the view work properly, we add the displayBlock attribute with the value true to the view -->
    <!-- the app is now run in a shell that limits the app width -->
    <!-- the shell control is now the outermost control of our app and automatically displays a so-called letterbox, if the screen size is larger than a certain width -->
    <!-- we don't add the Shell control to the declarative UI definition in the XML view if apps run in an external shell, like the SAP Fiori launchpad that already has a shell around the component UI -->
    <!-- there are further options to customize the shell, like setting a custom background image or color and setting a custom logo -->
    <Shell>
        <!-- the page itself is placed into the pages aggregation of another control called sap.m.App which does the following important things for us: -->
        <!-- 1. it writes a bunch of properties into the header of the index.html that are necessary for proper display on mobile devices -->
        <!-- 2. it offers functionality to navigate between pages with animations -->
        <!-- the app control is configured with our custom namespace class myAppDemoWT -->
        <!-- this class has no styling rules set and is used in the definition of the CSS rules to define CSS selectors that are only valid for this app -->
        <App class="myAppDemoWT">
            <pages>
                <!-- the page provides an aggregation to 0..N other controls called content -->
                <!-- it also displays the title attribute in a header section on top of the content -->
                <Page title="{i18n>homePageTitle}">
                    <!-- we add a button to the header area of the app view to show the reuse of the hello world dialog -->
                    <!-- when pressing the button the dialog will be opened as with the button that we previously created in the panel -->
                    <headerContent>
                        <Button icon="sap-icon://hello-world" press=".onOpenDialog"/>
                    </headerContent>
                    <content>
                        <!-- instead of putting the panel and its content directly into our App view, we will move it to a new separate HelloPanel view -->
                        <!-- we refer to this using an XMLView tag in the content aggregation of the page -->
                        <mvc:XMLView viewName="sap.ui.demo.walkthrough.view.HelloPanel"/>
                    </content>
                </Page>
            </pages>
        </App>
    </Shell>
</mvc:View>