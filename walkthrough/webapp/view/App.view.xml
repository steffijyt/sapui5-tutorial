<!-- the root node of the XML structure is the view -->
<!-- we reference the default namespace sap.m where the majority of our UI assets are located, we define an additional sap.ui.core.mvc namespace with alias mvc, where the SAPUI5 views and all other Model-View-Controller (MVC) assets are located -->
<!-- we add a reference to the controller -->
<!-- a view does not necessarily need an explicitly assigned controller, you do not have to create a controller if the view is just displaying information and no additional functionality is required -->
<!-- if a controller is specified, it is instantiated after the view is loaded -->
<mvc:View controllerName="sap.ui.demo.walkthrough.controller.App"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true">
    <!-- in order to make the fullscreen height of the view work properly, we add the displayBlock attribute with the value true to the view -->
    <!-- the app is now run in a shell that limits the app width -->
    <!-- the shell control is now the outermost control of our app and automatically displays a so-called letterbox, if the screen size is larger than a certain width -->
    <!-- we don't add the Shell control to the declarative UI definition in the XML view if apps run in an external shell, like the SAP Fiori launchpad that already has a shell around the component UI -->
    <!-- there are further options to customize the shell, like setting a custom background image or color and setting a custom logo -->
    <Shell>
        <!-- the page itself is placed into the pages aggregation of another control called sap.m.App which does the following important things for us: -->
        <!-- 1. it writes a bunch of properties into the header of the index.html that are necessary for proper display on mobile devices -->
        <!-- 2. it offers functionality to navigate between pages with animations -->
        <!-- the app control is configured with our custom namespace class myAppDemoWT -->
        <!-- this class has no styling rules set and is used in the definition of the CSS rules to define CSS selectors that are only valid for this app -->
        <App class="myAppDemoWT">
            <pages>
                <!-- we put both the input field and the button inside a containing control called sap.m.Page -->
                <!-- the page provides an aggregation to 0..N other controls called content -->
                <!-- it also displays the title attribute in a header section on top of the content -->
                <Page title="{i18n>homePageTitle}">
                    <content>
                        <!-- the actual content is wrapped inside a Panel control, in order to group related content -->
                        <!-- to layout the panel, we add the CSS class sapUiResponsiveMargin that will add some space around the panel -->
                        <!-- we have to set the width of the panel to auto since the margin would otherwise be added to the default width of 100% and exceed the page size -->
                        <!-- if you decrease the screen size, then you can actually see that the margin also decreases -->
                        <!-- as the name suggests, the margin is responsive and adapts to the screen size of the device -->
                        <!-- tablets will get a smaller margin and phones in portrait mode will not get a margin to save space on these small screens -->
                        <Panel headerText="{i18n>helloPanelTitle}" class="sapUiResponsiveMargin" width="auto">
                            <content>
                                <!-- the button triggers the .onShowHello event handler function when being pressed -->
                                <!-- we also have to specify the name of the controller that is connected to the view and holds the .onShowHello function by setting the controllerName attribute of the view -->
                                <!-- in the XML view, we use data binding to connect the button text to the showHelloButtonText property in the i18n model, a resource bundle is a flat structure, therefore the preceding slash (/) can be omitted for the path -->
                                <!-- we add our custom CSS class to the button to precisely define the space between the button and the input field -->
                                <Button text="{i18n>showHelloButtonText}" press=".onShowHello" class="myCustomButton"/>
                                <!-- we add an sap.m.Input control to the view, with this, the user can enter a recipient for the greetings -->
                                <!-- we bind its value to a SAPUI5 model by using the declarative binding syntax for XML views -->
                                <!-- the curly brackets {â€¦} indicate that data is taken from the value of the recipient's object name property, this is called "data binding" -->
                                <!-- /recipient/name declares the path in the model -->
                                <Input value="{/recipient/name}" valueLiveUpdate="true" width="60%"/>
                                <!-- to highlight the output text, we use a FormattedText control which can be styled individually, either by using custom CSS or with HTML code -->
                                <!-- we add our custom CSS class (myCustomText) and add a theme-dependent CSS class to set the highlight color that is defined in the theme -->
                                <!-- the actual color now depends on the selected theme which ensures that the color always fits to the theme and is semantically clear -->
                                <!-- do not specify colors in custom CSS but use the standard theme-dependent classes instead -->
                                <FormattedText htmlText="Hello {/recipient/name}" class="sapUiSmallMargin sapThemeHighlight-asColor myCustomText"/>
                            </content>
                        </Panel>
                    </content>
                </Page>
            </pages>
        </App>
    </Shell>
</mvc:View>