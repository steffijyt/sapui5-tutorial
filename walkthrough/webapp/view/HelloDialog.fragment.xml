<!-- fragments are light-weight UI parts (UI subtrees) which can be reused but do not have any controller -->
<!-- this means, whenever you want to define a certain part of your UI to be reusable across multiple views, or when you want to exchange some parts of a view against one another under certain circumstances (different user roles, edit mode vs read-only mode), a fragment is a good candidate, especially where no additional controller logic is required -->
<!-- a fragment can consist of 1 to n controls -->
<!-- at runtime, fragments placed in a view behave similar to "normal" view content, which means controls inside the fragment will just be included into the viewâ€™s DOM when rendered -->
<!-- there are of course controls that are not designed to become part of a view, for example, dialogs -->
<!-- but even for these controls, fragments can be particularly useful, as you will see in a minute -->
<!-- we will now add a dialog to our app -->
<!-- dialogs are special, because they open on top of the regular app content and thus do not belong to a specific view -->
<!-- that means the dialog must be instantiated somewhere in the controller code, but since we want to stick with the declarative approach and create reusable artifacts to be as flexible as possible, and because dialogs cannot be specified as views, we will create an XML fragment containing the dialog -->
<!-- a dialog, after all, can be used in more than only one view of your app -->

<!-- we add a new XML file to declaratively define our dialog in a fragment -->
<!-- the fragment assets are located in the core namespace, so we add an xml namespace for it inside the FragmentDefinition tag -->
<!-- the syntax is similar to a view, but since fragments do not have a controller this attribute is missing -->
<!-- also, the fragment does not have any footprint in the DOM tree of the app, and there is no control instance of the fragment itself (only the contained controls) -->
<!-- it is simply a container for a set of reuse controls -->
<!-- we also add an id for our Dialog to be able to access the dialog from our HelloPanel controller -->
<core:FragmentDefinition xmlns="sap.m"
    xmlns:core="sap.ui.core">
    <Dialog id="helloDialog" title="Hello {/recipient/name}">
    </Dialog>
</core:FragmentDefinition>