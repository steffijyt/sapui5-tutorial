# we move the texts of our UI to a separate resource file
# this way, they are all in a central place and can be easily translated into other languages
# this process of internationalization – in short i18n – is achieved in SAPUI5 by using a special resource model and the standard data binding syntax, but without preceding /
# the properties file for texts contains name-value pairs for each element
# you can add any number of parameters to the texts by adding numbers in curly brackets to them, these numbers correspond to the sequence in which the parameters are accessed (starting with 0)
# in this tutorial we will only have one properties file, however, in real-world projects, you would have a separate file for each supported language with a suffix for the locale
# for example i18n_de.properties for German, i18n_en.properties for English, and so on
# when a user runs the app, SAPUI5 will load the language file that fits best to the user's environment
# i18n files only impact client-side application texts, texts that are loaded from back-end systems can appear in all languages that are supported by the back-end system
# add comments to separate the bundle texts semantically

# App Descriptor
appTitle=Hello World
appDescription=A simple walkthrough app that explains the most important concepts of SAPUI5

# Hello Panel
showHelloButtonText=Say Hello
helloMsg=Hello {0}
homePageTitle=Walkthrough
helloPanelTitle=Hello World